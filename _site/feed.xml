<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-26T11:53:28+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cheney King</title><subtitle>Cheney King的个人博客</subtitle><author><name>Cheney King</name></author><entry><title type="html">菜鸟，也有春天！</title><link href="http://localhost:4000/2019/12/25/annual-personal-ummary/" rel="alternate" type="text/html" title="菜鸟，也有春天！" /><published>2019-12-25T00:00:00+08:00</published><updated>2019-12-25T00:00:00+08:00</updated><id>http://localhost:4000/2019/12/25/annual-personal-ummary</id><content type="html" xml:base="http://localhost:4000/2019/12/25/annual-personal-ummary/">&lt;p&gt;  非夜，亦无酒；我们不谈技术，亦无风月～。这里只有一个半路出家一路走来的前端菜鸟的故事。&lt;/p&gt;

&lt;p&gt;  记得八九月份，在某前端交流群结识了一位想转行前端的小伙伴，他因学习压力和没有面试机会而苦恼迷茫，我安慰他说：菜鸟，也有春天。&lt;/p&gt;

&lt;h2 id=&quot;前端缘起&quot;&gt;前端·缘起&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/king-hcj/introduce/blob/master/images/myschool1.jpeg?raw=true&quot; alt=&quot;我的学校&quot; /&gt;
  那是2016年的毕业季，他的毕设研究题目是《基于图模型理论的冲突敏感性分析》，需要做一个演示的界面，当时，他第一时间想到了网页，那时候他对前端的了解，仅限于从网上下载过一个HTML模版，在模版上改了那么些文字。面对&lt;strong&gt;数学课题&lt;/strong&gt;庞大的矩阵运算，他最终放弃了web，转而使用更为熟悉且更适合矩阵运算的MATLAB GUI完成了演示系统的制作，顺利毕业。&lt;/p&gt;

&lt;p&gt;  如今回首，也许只是因为当时对网页的匆匆一瞥，让他自此与前端结缘。&lt;/p&gt;

&lt;h2 id=&quot;军工科研&quot;&gt;军工·科研&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/king-hcj/introduce/blob/master/images/guifei.jpeg?raw=true&quot; alt=&quot;贵飞&quot; /&gt;
  他的学校是国防七校之一，毕业后，怀揣着“效法羲和驭天马，志在长空牧群星”的梦想和对国防军工的满腔热情投入到了老三线的建设当中。&lt;/p&gt;

&lt;p&gt;  说实话，有时候，他很怀念国企的两年时光。 &lt;br /&gt;
  这两年，他有时间喝茶，有时间打球，有机会远游；&lt;br /&gt;
  这两年，他出差去了很多地方，见到了很多以前梦想着、憧憬着、渴望着的东西；  &lt;br /&gt;
  这两年，他也有作为一名理科生，整天面对一堆飞机技术资料的文案工作的迷茫； &lt;br /&gt;
  这两年，总体来说，他过的轻松惬意，也过的迷茫不甘。&lt;/p&gt;

&lt;p&gt;  军工单位办公没有外网，于是他下载了W3Cschool App，用来看上面的教程进行入门，他甚至开通了会员，为了刷上面的微课和FreeCodeCamp编程挑战；掘金、思否社区也成了他经常闲逛的地方。&lt;/p&gt;

&lt;p&gt;  他很迷茫，没有方向感的迷茫。到底企业需要什么？到底达到怎样一个程度，出去才能找到工作？为此，他也曾彻夜难眠，甚至到&lt;a href=&quot;https://segmentfault.com/q/1010000014946491&quot;&gt;
SegmentFault社区求助&lt;/a&gt;；他也尝试着把自己的学习历程记录在思否社区的&lt;a href=&quot;https://segmentfault.com/a/1190000015048814&quot;&gt;一篇文章&lt;/a&gt;里，期望能对拥有相似经历的前端人提供一点儿帮助。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/king-hcj/introduce/blob/master/images/huangguoshu2.jpeg?raw=true&quot; alt=&quot;黄果树瀑布2&quot; /&gt;
  2018年7月底，是他到国企整整两年的时候，他提出了辞职，他的理由是：离家太远，他也想出去看看。其实，想出去看看是真，离家太远多半是托词～。 &lt;br /&gt;
  那个时候，他在W3Cschool的经验值排行榜上位居第二（现在W3Cschool貌似已经取消了经验值排行的功能），并独立完成其上FreeCodeCamp 95%挑战项目，但他觉得，这对于前端门外汉，依然远远不够。他只是知道React、Vue，却不知道在外面已经那么普及；他基于C语言去理解JavaScript，却基本不知道闭包、原型链；他不会ES6、没听过防抖节流…&lt;/p&gt;

&lt;h2 id=&quot;上海初始&quot;&gt;上海·初始&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/king-hcj/introduce/blob/master/images/modu.jpeg?raw=true&quot; alt=&quot;魔都的国庆之夜&quot; /&gt;
  从国企出来后，怀着几许忐忑，他来到了有着魔都之称的上海。 &lt;br /&gt;
  来上海的第一周，一边看面试题，一边顶着烈日炎炎，他一共面试了13家公司，后面一段时间，又有选择性的面试了几家公司。最终到手有七八个offer，&lt;strong&gt;他选择了一家薪水不是最高、规模也不是最大的公司，理由是：这家公司经常招在校生，入职前一两个月，主要是按照公司培养方案进行阶段性学习。&lt;/strong&gt;那段时间，他写了150来页的学习笔记，不过是PDF的，因为在国企，他最熟悉的是Word和PDF。&lt;/p&gt;

&lt;p&gt;  那家公司是做淘宝平台卖家工具的，他还记得接的第一个需求——中秋活动。 &lt;br /&gt;
  当时，一个新来的小伙伴做活动页，而他负责活动页不同区域点击跳转进来后根据条件打开弹窗并定位短信的逻辑。那时候，他&lt;strong&gt;根本不知道路由跳转，更不要说history、location这些了，参数获取、处理更是无从谈起。&lt;/strong&gt; &lt;br /&gt;
  其实现在，我一直很理解许多大佬在做技术分享时说有些新人的问题让人抓狂、找不到他想表达什么、没法帮他的说法，因为那时候，他也正经历着那个阶段，他的面前是黑色的，没有头绪，不知道前端除了展示静态页面还能干什么，要怎么做。 &lt;br /&gt;
  那个需求结束，进入项目组前，leader找他谈话，有批评，有鼓励，最后一句是：&lt;strong&gt;希望你把在这里的每一天，都当作是在这里的最后一天&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;  三个月转正答辩的时候，公司当初面试他的领导，亦是HBuilder团队前leader说：公司是一个商业行为，如果以转正的标准来要求你，你肯定是达到的，但以你的学历和经历，面试时我也说了，我们对你的要求会更高。 &lt;br /&gt;
  最终，他接受了公司不涨薪转正的方案。即便现在已不在这家公司上班，他对这家公司仍然心存感激——因为&lt;strong&gt;是他们为他打开了走进现代前端的大门&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;  那时候，他怀疑过自己是否适合做前端，是否真的如有的小伙伴说的没有编程思维，两年的国企生涯，让他在专业技术上荒废了太多。 &lt;br /&gt;
  但是，&lt;strong&gt;人，不怕被质疑或者自我怀疑，只要他没有退路。&lt;/strong&gt; &lt;br /&gt;
   &lt;em&gt;当初是你要分开，分开就分开，现在又要用真爱把国企哄回来？&lt;/em&gt; 不可能的！&lt;/p&gt;

&lt;p&gt;  正如前端校友&lt;a href=&quot;https://segmentfault.com/a/1190000021390351&quot;&gt;刘小夕&lt;/a&gt;写的：&lt;em&gt;岁月静好的背后，都有很多不为人知的努力。这个世界，大多数人都不容易，我恰好也是那个大多数之一。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;进化思辨&quot;&gt;进化·思辨&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/king-hcj/introduce/blob/master/images/shanghaiguahua.jpeg?raw=true&quot; alt=&quot;刮画&quot; /&gt;
  痛定思痛，2019年元旦当日，他订立了个人OKR，并在钉钉上发起了个人每日学习打卡，时至今日，不曾一日间断。就在写此文的前两天，他使用jekyll-now在GitHub上搭建了&lt;a href=&quot;https://king-hcj.github.io&quot;&gt;个人博客&lt;/a&gt;，并对2019年学习过的东西进行了&lt;a href=&quot;https://king-hcj.github.io/2019/12/22/front-end-engineer/&quot;&gt;总结&lt;/a&gt;，他很骄傲这一年的坚持，虽然还未曾使自己成为梦想中的样子，但也因此收获很多。 &lt;br /&gt;
  关于个人博客，起初他其实是有太多顾虑的。&lt;strong&gt;首先，自己的技术水平还并未达到可以随心所欲说教的地步；其次，如今的网络，好文章很多，不好的文章也足够多，自己会使不好的文章群体更加庞大而因此误人子弟吗？最后，自己写的东西，是否真的会有人关注？&lt;/strong&gt; &lt;br /&gt;
  后来他感觉，面对很多事情，当我们去排斥它的时候，借口总比去干的理由多，有时候，我们把自己看的过重，有时候，又是看的太轻了；要想技术提升，唯有日积月累，不积跬步，无以至千里。&lt;strong&gt;学习是自己的事，如果你无心，知识自然对你无意～&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/king-hcj/introduce/blob/master/images/qingdao.jpeg?raw=true&quot; alt=&quot;青岛彩虹桥&quot; /&gt;
  他曾在个人第一篇思否文章&lt;a href=&quot;https://segmentfault.com/a/1190000015048814&quot;&gt;《关于前端开发的资源推荐与总结【持续更新】》&lt;/a&gt;中写道：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;  我们很多人总会有这样一个问题，就是&lt;strong&gt;喜欢收藏很多东西，自我安慰说等有时间了一定好好看&lt;/strong&gt;，以至于网页收藏夹、微信收藏栏、百度网盘等处积累了太多资源，给人一种学富五车的样子，而&lt;strong&gt;只有自己才知道，被收藏的东西，真正看了多少，掌握了多少&lt;/strong&gt;。 &lt;br /&gt;
  对于我本人来讲，可以毫不夸张的说，&lt;strong&gt;如果能将自己收藏的东西完全学习掌握，至少会是某个领域的专家&lt;/strong&gt;，我想，对于大多数人来说，情况可能和我也有很大的相似之处。所以说，我们需要时刻激励自己，&lt;strong&gt;不能让类似“先收藏了，等以后有时间再看”这样的话语来腐蚀自己、消磨自己，最终让只是随手收藏而不去阅读成为一种习惯&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  这是一个&lt;strong&gt;知识极度丰富的时代&lt;/strong&gt;，零散的、看起来很重要的东西实在太多；而面对令人眼花缭乱的知识，发现自己掌握的实际只是冰山一粟，&lt;strong&gt;知识爆炸让我们更焦虑，焦虑导致我们重复着一些无意义的收藏&lt;/strong&gt;，很多时候，&lt;strong&gt;我们需要放弃这些零散的知识，转而进行一些系统的学习，搭建自己的知识体系&lt;/strong&gt;（比如看书、阅读专栏），只有这样，我们才不至于在这个知识极度丰富的时代迷失自我。&lt;/p&gt;

&lt;h2 id=&quot;不是终章&quot;&gt;不是终章&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/king-hcj/introduce/blob/master/images/huashan111.jpeg?raw=true&quot; alt=&quot;华山日出&quot; /&gt;
  作为前端菜鸟，一路走来，他是幸运的。身在魔都，机会多，加之有一点学校的优势，他可能比很多人更容易获得机会。&lt;/p&gt;

&lt;p&gt;  相比初始，如今，他多了一些坦然。前天，他回顾了2019年的OKR，也列出了一些2020年的关注点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;基于原生JS、HTML、CSS开发的能力&lt;/li&gt;
  &lt;li&gt;基于&lt;strong&gt;NodeJS&lt;/strong&gt;的全栈开发能力&lt;/li&gt;
  &lt;li&gt;基于React Native、Flutter、小程序的移动端开发能力&lt;/li&gt;
  &lt;li&gt;React和Vue底层原理、思想、源码的阅读学习&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;性能优化、网络安全、网络协议、操作系统、编译原理、SQL、计算机组成原理、数据结构和算法、数学能力&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;项目构建能力，持续集成、持续交付能力&lt;/li&gt;
  &lt;li&gt;前沿技术动态的把控&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;知识输出能力和个人前端体系的构建&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  这，就是我的故事，自知在万千同样奋斗着的人们中不值一提，但也许对正在奋斗的你有借鉴作用；也许你有更好的故事，那么，我有酒，欢迎与我交流！&lt;/p&gt;

&lt;p&gt;  我始终相信，&lt;strong&gt;菜鸟如我，也有春天！&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;致在前端领域共同苦行的菜鸟们！&lt;/p&gt;</content><author><name>Cheney King</name></author><summary type="html">  非夜，亦无酒；我们不谈技术，亦无风月～。这里只有一个半路出家一路走来的前端菜鸟的故事。</summary></entry><entry><title type="html">2020年个人OKR关注点</title><link href="http://localhost:4000/2019/12/23/okr/" rel="alternate" type="text/html" title="2020年个人OKR关注点" /><published>2019-12-23T00:00:00+08:00</published><updated>2019-12-23T00:00:00+08:00</updated><id>http://localhost:4000/2019/12/23/okr</id><content type="html" xml:base="http://localhost:4000/2019/12/23/okr/">&lt;p&gt;记录个人&lt;a href=&quot;https://www.jianshu.com/p/09c6d7d89175&quot;&gt;OKR&lt;/a&gt;相关信息。&lt;/p&gt;

&lt;h1 id=&quot;2020年个人okr关注点&quot;&gt;2020年个人OKR关注点&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;基于原生JS、HTML、CSS开发的能力&lt;/li&gt;
  &lt;li&gt;基于&lt;strong&gt;NodeJS&lt;/strong&gt;的全栈开发能力（Nginx、Go、Java）&lt;/li&gt;
  &lt;li&gt;基于React Native、Flutter、小程序的移动端开发能力&lt;/li&gt;
  &lt;li&gt;React和Vue底层原理、思想、源码的阅读学习&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;性能优化、网络安全、网络协议、操作系统、编译原理、SQL、计算机组成原理、数据结构和算法、数学能力&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;项目构建能力，持续集成、持续交付能力&lt;/li&gt;
  &lt;li&gt;前沿技术动态的把控&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;知识输出能力和个人前端体系的构建&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2019年个人okr&quot;&gt;2019年个人OKR&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;目标：成为一名优秀的中级前端工程师&lt;/li&gt;
  &lt;li&gt;关键结果
    &lt;ul&gt;
      &lt;li&gt;基础牢固
        &lt;blockquote&gt;
          &lt;p&gt;&lt;strong&gt;红宝书&lt;/strong&gt;、CSS世界、网络、高效前端、数据结构与算法等书籍至少看一遍（详见微信、京东读书、电脑学习资料、PDF文件夹）&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;能用PHP、SQL、数据库完成大部分接口（Redis）&lt;/li&gt;
      &lt;li&gt;React底层原理与设计思想（Vue可涉及提升）、React Native书籍&lt;/li&gt;
      &lt;li&gt;前端工具熟练掌握（git、webpack等书籍）&lt;/li&gt;
      &lt;li&gt;能自主解决服务器、接口等大多数错误（排查解决）；前端独挡一面&lt;/li&gt;
      &lt;li&gt;每天学习，每天进步，薪资增长50%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Cheney King</name></author><summary type="html">记录个人OKR相关信息。</summary></entry><entry><title type="html">前端学习之路</title><link href="http://localhost:4000/2019/12/22/front-end-engineer/" rel="alternate" type="text/html" title="前端学习之路" /><published>2019-12-22T00:00:00+08:00</published><updated>2019-12-22T00:00:00+08:00</updated><id>http://localhost:4000/2019/12/22/front-end-engineer</id><content type="html" xml:base="http://localhost:4000/2019/12/22/front-end-engineer/">&lt;p&gt;  自2018年7月31日离开国防单位贵州贵航飞机设计研究所，一年多来，我在前端领域，走过了很多路，体会到了前端所见即所得的玄妙，也不断经历着转行的不易与艰辛。如果说这一年多来，有什么是让我觉得最值得骄傲的，那无疑就是两个字——坚持。2019年1月1日订立个人OKR目标并发起每日钉钉打卡，300余天的坚持，或许还未曾使自己完全成为梦想中的样子，但也因此收获很多。现将2019年学习过的书籍、专栏、视频进行整理。&lt;/p&gt;

&lt;h2 id=&quot;书籍&quot;&gt;书籍&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;《深入理解ES6》 —— Nicholas C. Zakas&lt;/li&gt;
  &lt;li&gt;《React进阶之路》 —— 徐超&lt;/li&gt;
  &lt;li&gt;《高效前端：Web高效编程与优化实践》 —— 李银城&lt;/li&gt;
  &lt;li&gt;《JavaScript高级程序设计（第3版）》 —— Nicholas C. Zakas（差三章左右）&lt;/li&gt;
  &lt;li&gt;《CSS世界》 —— 张鑫旭（未读完）&lt;/li&gt;
  &lt;li&gt;《精通Git(第二版)》 —— Scott Chacon / Ben Straub(前两章)&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot;&gt;开源链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;《深入React技术栈》 —— 陈屹（未读完）&lt;/li&gt;
  &lt;li&gt;《React全栈(Redux+Flux+webpack+Babel整合开发)》 —— 张轩 / 杨寒星(差两章)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;慕课网&quot;&gt;慕课网&lt;/h2&gt;
&lt;h3 id=&quot;慕课视频课程&quot;&gt;慕课视频课程&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/225.html&quot;&gt;HTTP协议原理+实践  Web开发工程师必学&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/190.html&quot;&gt;揭秘一线互联网企业 前端JavaScript高级面试&lt;/a&gt;(有图片总结)&lt;/li&gt;
  &lt;li&gt;Web攻城狮培养计划之进击JavaScript核心视频课程（&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%2F%E5%89%8D%E7%AB%AF%E7%B2%BE%E5%8D%8E%E8%A7%86%E9%A2%91%2FWeb%E6%94%BB%E5%9F%8E%E7%8B%AE%E5%9F%B9%E5%85%BB%E8%AE%A1%E5%88%92%E4%B9%8B%E8%BF%9B%E5%87%BBJavaScript%E6%A0%B8%E5%BF%83%E8%A7%86%E9%A2%91%E8%AF%BE%E7%A8%8B&quot;&gt;见网盘&lt;/a&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/255.html&quot;&gt;Javascript 设计模式系统讲解与应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ES6零基础教学解析彩票项目(有图片总结)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/229.html&quot;&gt;《React16.4开发简书项目-从零基础入门到实战》&lt;/a&gt;（有图片总结）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/236.html&quot;&gt;React全家桶+AntD 共享单车后台管理系统开发&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Redux+react+Router+Node.js全栈开发(&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%2F%E5%89%8D%E7%AB%AF%E7%B2%BE%E5%8D%8E%E8%A7%86%E9%A2%91%2F%E2%9C%AA%CF%89%E2%9C%AA%E6%9F%90%E8%AF%BE%E7%BD%91Redux%2BReact%20Router%2BNode.js%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91&quot;&gt;见网盘&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;React全栈 + 服务器渲染（ssr）打造社区webapp(网盘)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/179.html&quot;&gt;React16+React-Router4 从零打造企业级电商后台管理系统&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/348.html&quot;&gt;React劲爆新特性Hooks 重构去哪儿网火车票PWA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/334.html&quot;&gt;React16.8+Next.js+Koa2开发Github全栈项目&lt;/a&gt;(只看了第三章)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/316.html&quot;&gt;从基础到实战 手把手带你掌握新版Webpack4.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;四大维度解锁 Webpack 3.0 前端工程化(网盘)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/146.html&quot;&gt;《Node.js入门到企业Web开发中的应用》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/320.html&quot;&gt;《Node.js 从零开发 web server博客项目 前端晋升全栈工程师必备》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/learn/808&quot;&gt;ReactNative入门与进阶&lt;/a&gt;(免费)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/304.html&quot;&gt;新版React Native从入门到实战 打造高质量上线App&lt;/a&gt;(未看完)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/learn/50&quot;&gt;Yahoo军规&lt;/a&gt;(免费)&lt;/li&gt;
  &lt;li&gt;Web App用组件方式开发全站(网盘，旧技术切图)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/learn/763&quot;&gt;TypeScript入门&lt;/a&gt;(免费)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/330.html&quot;&gt;《基于TypeScript从零重构axios》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/learn/1035&quot;&gt;Flutter开发第一步-Dart编程语言入门&lt;/a&gt;(免费)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/learn/1090&quot;&gt;Flutter入门与案例实战&lt;/a&gt;(免费)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/321.html&quot;&gt;Flutter从入门到进阶实战携程网App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://class.imooc.com/sc/?plan_id=64&quot;&gt;Java零基础入门&lt;/a&gt;(开始)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/learn/643&quot;&gt;CSS深入理解之z-index&lt;/a&gt;(免费)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/164.html&quot;&gt;《全面系统讲解CSS 工作应用+面试一步搞定》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/203.html&quot;&gt;Vue2.5开发去哪儿网App 从零基础入门到实战项目&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;快速上手Linux玩转典型应用(网盘)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/214.html&quot;&gt;区块链入门与去中心化应用实战&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/learn/1084&quot;&gt;Taro多端框架开发外卖首页&lt;/a&gt;(免费)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/306.html&quot;&gt;掌握Taro多端框架 快速上手小程序H5开发&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/183.html&quot;&gt;《微信小游戏入门与实战 刷爆朋友圈》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;慕课专栏&quot;&gt;慕课专栏&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/read/34&quot;&gt;《从0开始学爬虫》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.imooc.com/read/35&quot;&gt;《零基础学透TypeScript》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;极客时间&quot;&gt;极客时间&lt;/h2&gt;
&lt;h3 id=&quot;极客时间专栏&quot;&gt;极客时间专栏&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/216?utm_term=zeusEALI1&amp;amp;utm_source=app&amp;amp;utm_medium=articourse&quot;&gt;《浏览器工作原理与实践》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/154?utm_term=zeusEALI1&amp;amp;utm_source=app&amp;amp;utm_medium=articourse&quot;&gt;《重学前端》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/252?utm_term=zeusEALI1&amp;amp;utm_source=app&amp;amp;utm_medium=articourse&quot;&gt;《JavaScript核心原理解析》&lt;/a&gt;(在看)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/48?utm_term=zeusEALI1&amp;amp;utm_source=app&amp;amp;utm_medium=articourse&quot;&gt;《左耳听风》&lt;/a&gt;(在看)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;极客时间视频&quot;&gt;极客时间视频&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/course/intro/145&quot;&gt;《玩转Git三剑客》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;掘金&quot;&gt;掘金&lt;/h2&gt;
&lt;h3 id=&quot;掘金小册&quot;&gt;掘金小册&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/book/5a6abad5518825733c144469&quot;&gt;《使用 webpack 定制前端开发环境》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/book/5c526902e51d4543805ef35e&quot;&gt;《你不知道的Chrome调试技巧》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/book/5a1212bc51882531ea64df07&quot;&gt;《用npm script打造超溜的前端工作流》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/book/5b936540f265da0a9624b04b&quot;&gt;《前端性能优化原理与实践》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/book/5bdc715fe51d454e755f75ef&quot;&gt;《前端面试之道》&lt;/a&gt;(在看)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;51cto&quot;&gt;51CTO&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://edu.51cto.com/course/10543.html&quot;&gt;Vue. js2.0之全家桶系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;其他经典&quot;&gt;其他经典&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://yuchengkai.cn/&quot;&gt;前端进阶之道&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.im/user/5b0158d66fb9a07ab458e82b/collections&quot;&gt;掘金&lt;/a&gt;、知乎、思否、微信公众号文章、慕课手记等&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Cheney King</name></author><summary type="html">  自2018年7月31日离开国防单位贵州贵航飞机设计研究所，一年多来，我在前端领域，走过了很多路，体会到了前端所见即所得的玄妙，也不断经历着转行的不易与艰辛。如果说这一年多来，有什么是让我觉得最值得骄傲的，那无疑就是两个字——坚持。2019年1月1日订立个人OKR目标并发起每日钉钉打卡，300余天的坚持，或许还未曾使自己完全成为梦想中的样子，但也因此收获很多。现将2019年学习过的书籍、专栏、视频进行整理。</summary></entry><entry><title type="html">前端综合笔记</title><link href="http://localhost:4000/2019/12/22/angle-aiqier/" rel="alternate" type="text/html" title="前端综合笔记" /><published>2019-12-22T00:00:00+08:00</published><updated>2019-12-22T00:00:00+08:00</updated><id>http://localhost:4000/2019/12/22/angle-aiqier</id><content type="html" xml:base="http://localhost:4000/2019/12/22/angle-aiqier/">&lt;p&gt;这些是在搭建本博客之前，在工作中进行的一些总结，篇幅略长。&lt;/p&gt;

&lt;h1 id=&quot;react-intl&quot;&gt;React-intl&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;后台没有，再去&lt;strong&gt;正式环境&lt;/strong&gt;添加；一定在正式环境添加key；只添加中文；测试环境的由后端同步（李建龙）；&lt;/li&gt;
  &lt;li&gt;登陆网站，请求接口获得messages数组；&lt;/li&gt;
  &lt;li&gt;先写页面，实现功能，再进行国际化；&lt;/li&gt;
  &lt;li&gt;问题：冗余key；代码中中文&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://www.cnblogs.com/qiaojie/p/6411199.html&quot;&gt;React-intl 实现多语言&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;erp项目&quot;&gt;erp项目&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;module:数据源，actions，initstate，reducer&lt;/li&gt;
  &lt;li&gt;antd表格，表单&lt;/li&gt;
  &lt;li&gt;后期任务：
    &lt;ul&gt;
      &lt;li&gt;后期做erp web app；antd-mobile；&lt;/li&gt;
      &lt;li&gt;采购管理»采购订单，后期可能会改造；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;菜单
    &lt;ul&gt;
      &lt;li&gt;菜单路径定义：aiqier-erp-admin-web/src/components/App/AppMenu.js&lt;/li&gt;
      &lt;li&gt;菜单引用：aiqier-erp-admin-web/src/components/App/AppMainWrapper.js
        &lt;ul&gt;
          &lt;li&gt;AppLogo：左侧logo&lt;/li&gt;
          &lt;li&gt;AppHeader：右侧头部&lt;/li&gt;
          &lt;li&gt;this.renderAppMenus():菜单&lt;/li&gt;
          &lt;li&gt;this.renderAppContent(pathname)：右侧内容&lt;/li&gt;
          &lt;li&gt;Redirect to={temObject}&lt;/li&gt;
          &lt;li&gt;Notification&lt;/li&gt;
          &lt;li&gt;AnchorButton：scrollTop/scrollBottom&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;项目操作
    &lt;ol&gt;
      &lt;li&gt;git命令
        &lt;ul&gt;
          &lt;li&gt;git remote -v&lt;/li&gt;
          &lt;li&gt;git remote add root http://……git&lt;/li&gt;
          &lt;li&gt;git remote -v&lt;/li&gt;
          &lt;li&gt;git status&lt;/li&gt;
          &lt;li&gt;git pull root master&lt;/li&gt;
          &lt;li&gt;git branch -a&lt;/li&gt;
          &lt;li&gt;git checkout – package.json&lt;/li&gt;
          &lt;li&gt;git checkout –yarn.lock&lt;/li&gt;
          &lt;li&gt;rm -rf package - lock.json&lt;/li&gt;
          &lt;li&gt;rm -rf node_modules/&lt;/li&gt;
          &lt;li&gt;yarn install&lt;/li&gt;
          &lt;li&gt;git add .&lt;/li&gt;
          &lt;li&gt;git commit -m’XXXXXX’&lt;/li&gt;
          &lt;li&gt;git push&lt;/li&gt;
          &lt;li&gt;git pull root master&lt;/li&gt;
          &lt;li&gt;git log&lt;/li&gt;
          &lt;li&gt;git push&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;项目部署
        &lt;ul&gt;
          &lt;li&gt;地址：webpack.XX.org(Jenkins)&lt;/li&gt;
          &lt;li&gt;PR代码&lt;/li&gt;
          &lt;li&gt;yarn merge:root test&lt;/li&gt;
          &lt;li&gt;yarn deploy (test)&lt;/li&gt;
          &lt;li&gt;yarn merge:root prod&lt;/li&gt;
          &lt;li&gt;yarn deploy prod&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;react-dropzone上传文件类型支持&quot;&gt;react-dropzone上传文件类型支持：&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;Dropzone
        onDrop={this.onDrop}
        accept={'image/jpg, image/jpeg, image/png, image/gif, application/zip, ' +
        'application/x-rar-compressed, application/msword, application/pdf,' +
        ' application/vnd.openxmlformats-officedocument.wordprocessingml.document,' +
        ' application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
        style={_styles.drop}&amp;gt;
        &amp;lt;Icon
        type='inbox'
        style={_styles.icon} /&amp;gt;
        &amp;lt;p style={_styles.title}&amp;gt;
        Click or drag file to this area to upload
        &amp;lt;/p&amp;gt;
        &amp;lt;p style={_styles.message}&amp;gt;
        Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files
        &amp;lt;/p&amp;gt;
    &amp;lt;/Dropzone&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;参考：
&lt;a href=&quot;https://blog.csdn.net/xiaoranzhizhu/article/details/70473734&quot;&gt;office 所有后缀对应的 content-type&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000008340434&quot;&gt;为什么react的组件要super(props)&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;如果你用到了constructor就必须写super(),是用来初始化this的，可以绑定事件到this上;
如果你在constructor中要使用this.props,就必须给super加参数：super(props)；
（无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的；）
如果没用到constructor,是可以不写的,直接：&lt;/p&gt;
      &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class HelloMessage extends React.Component{
    render (){
        return (
            &amp;lt;div&amp;gt;nice to meet you! {this.props.name}&amp;lt;/div&amp;gt;
        );
    }
}
//不过这种只是用render的情况，使用一般的ES6函数写会更简便：
const HelloMessage = (props)=&amp;gt;(
    &amp;lt;div&amp;gt;nice to meet you! {this.props.name}&amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;工具插件库&quot;&gt;工具/插件/库&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;树形展示GitHub项目代码Chrome插件：Octotree&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;iterm配置文档参考：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/weixuqin/p/7029177.html&quot;&gt;Mac下终端配置（item2 + oh-my-zsh + solarized配色方案）&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebookincubator/idx&quot;&gt;idx使用&lt;/a&gt;:现在多使用’?.’写法(?.是一个整体，相当于一个运算符)，可以不使用idx。新的’？.’写法：&lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining&quot;&gt;@babel/plugin-proposal-optional-chaining&lt;/a&gt; &lt;br /&gt;
示例：
    &lt;ol&gt;
      &lt;li&gt;obj?.foo.bar?.baz&lt;/li&gt;
      &lt;li&gt;obj?.[‘foo’]?.bar?.baz&lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; function test() {
   return 42;
 }
 test?.();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;|| 和 ??区别
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   let a = { b: { c: 0 } }
   console.log(a?.b?.c || 33) // 33
   console.log(a?.b?.c ?? 33) // 0
   console.log(a?.c?.c || 22) // 22
   console.log(a?.c?.c ?? 22) // 22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/facebookincubator/idx/blob/master/packages/idx/src/idx.js&quot;&gt;idx源码链接&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  function idx&amp;lt;Ti, Tv&amp;gt;(input: Ti, accessor: (input: Ti) =&amp;gt; Tv): ?Tv {
    try {
      return accessor(input);
    } catch (error) {
      if (error instanceof TypeError) {
        if (nullPattern.test(error)) {
          return null;
        } else if (undefinedPattern.test(error)) {
          return undefined;
        }
      }
      throw error;
    }
  }
  const nullPattern = /^null | null$|^[^(]* null /i;
  const undefinedPattern = /^undefined | undefined$|^[^(]* undefined /i;
  idx.default = idx;
  module.exports = idx;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/pd4d10/console-importer&quot;&gt; console-importer&lt;/a&gt;:在在 Dev Tools 里面来使用 npm 插件！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lodashjs.com/&quot;&gt; Lodash-文档&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;omit 忽略值：
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var object = { 'a': 1, 'b': '2', 'c': 3 };   
  _.omit(object, ['a', 'c']);   
  // =&amp;gt; { 'b': '2' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;curl
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;百科：cURL是一个利用URL语法在命令行下工作的文件传输工具，1997年首次发行。它支持文件上传和下载，所以是综合传输工具，但按传统，习惯称cURL为下载工具。cURL还包含了用于程序开发的libcurl。&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/f05bbd5007d9&quot;&gt;curl 的使用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/chenliaoyuanjv/article/details/79689028&quot;&gt;Linux 命令行：cURL 的十种常见用法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/07c4dddae43a&quot;&gt;curl 命令详解&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://react-dnd.github.io/react-dnd/about&quot;&gt;React DnD&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://momentjs.cn/docs/&quot;&gt;Moment.js 文档&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://cassetterocks.github.io/react-infinite-scroller/&quot;&gt;React Infinite Scroller&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;a href=&quot;https://www.dropzonejs.com/#&quot;&gt;DropzoneJS&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&quot;https://motion.ant.design/index-cn&quot;&gt;Ant Motion &lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&quot;https://alvarotrigo.com/fullPage/&quot;&gt;fullPage全屏滚动&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://lesscss.cn/&quot;&gt;Less 中文网&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;a href=&quot;http://www.typescriptlang.org/index.html&quot;&gt;TypeScript英文文档&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&quot;https://www.tslang.cn/index.html&quot;&gt;中文&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;a href=&quot;http://nextjs.frontendx.cn/&quot;&gt;Next.js文档&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&quot;https://nextjs.org/&quot;&gt;Next.js英文文档&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;技巧技法&quot;&gt;技巧技法&lt;/h1&gt;
&lt;h2 id=&quot;git&quot;&gt;git&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;已提交过的代码，被删除，git status会是绿色，相当于已经add过了，会被下一次commit和push带着自动提交远程&lt;/li&gt;
  &lt;li&gt;Git文件名大小写敏感:
    &lt;ul&gt;
      &lt;li&gt;问题：本地代码运行ok，但是发现push上去的代码运行后报错，发现有个文件没注意大小写，于是重命名了该文件，发现git没有识别这个更改，不能提交&lt;/li&gt;
      &lt;li&gt;查看git 的设置:git config –get core.ignorecase&lt;/li&gt;
      &lt;li&gt;git默认是不区分大小的，因此当你修改了文件名的大小写后，git并不会认为你有修改&lt;/li&gt;
      &lt;li&gt;更改设置解决:git config core.ignorecase false
        &lt;h2 id=&quot;js&quot;&gt;JS&lt;/h2&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_38627581/article/details/77353015&quot;&gt;js判断对象是否为空对象的几种方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;a href=&quot;http://nodejs.cn/api/synopsis.html&quot;&gt;Node.js 中文文档&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&quot;https://nodejs.org/en/docs/&quot;&gt;Node.js 英文文档&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;函数防抖运用:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A.js
// 防抖实现
export const debounce = (method, wait) =&amp;gt; {
  let timeout
  // args为返回函数调用时传入的参数，传给method
  return function (...args) {
 let context = this
 if (timeout) {
   clearTimeout(timeout)
 }
 timeout = setTimeout(() =&amp;gt; {
   // args是一个类数组，所以使用fn.apply
   // 也可写作method.call(context, ...args)
   method.apply(context, args)
 }, wait)
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;hr /&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;B.js
//调用：
import { debounce } from A;
debouncedFn = debounce(this.props.getProductItems, 500)
//实际使用：
this.debouncedFn(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;react如何产生随机不重复的key
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div key={+new Date() + Math.random()}&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;使用数组的索引&lt;/li&gt;
      &lt;li&gt;使用uuid：https://www.npmjs.com/package/uuid&lt;/li&gt;
      &lt;li&gt;使用uniqid：https://www.npmjs.com/package/uniqid&lt;/li&gt;
      &lt;li&gt;Date.now()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PureComponent使用(以选择框为例)
    &lt;ul&gt;
      &lt;li&gt;使用PureComponent，父组件传递的props不能全是对象和不变的量，否则会导致一直不更新(如果渲染用的checked来自对象，也应该传一个每次切换会变化为true和false的checked，即便不直接使用)&lt;/li&gt;
      &lt;li&gt;直接使用shouldComponentUpdate，nextProps和this.props进行对比的属性也不能来自对象(例如：return nextProps.item.checked !== this.props.item.checked，也会导致不更新)&lt;/li&gt;
      &lt;li&gt;函数组件:React.memo(…)是React v16.6引进来的新属性。它的作用和React.PureComponent类似，是用来控制函数组件的重新渲染的。React.memo(…) 其实就是函数组件的React.PureComponent。
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; let TestC = (props) =&amp;gt; {
   return ( 
       &amp;lt;div&amp;gt;
       { props.count }
       &amp;lt;/&amp;gt;
   )
 }
 TestC = React.memo(TestC);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   - PureComponent减少ES6的类组件的无用渲染;React.memo(...)减少函数组件的无用渲染
   - 参考阅读
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://reactjs.org/blog/2018/10/23/react-v-16-6.html&quot;&gt;React v16.6.0: lazy, memo and contextType&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://www.ptbird.cn/react-lazy-suspense-error-boundaries.html&quot;&gt;react v16.6 动态 import，React.lazy()、Suspense、Error boundaries&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://react-china.org/t/react-memo-lazy-suspense-hooks/28789&quot;&gt;React新特性实例详解（memo、lazy、suspense、hooks）&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Modal.confirm的onOk，可以把this传进去，也可以写箭头函数
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Modal.confirm({
   title: messages['common_0005'],
   content: messages['prod_br_0008'],
   onOk () {
     _this.props.method()
   },
   &amp;lt;!-- onOk: () =&amp;gt; {
     this.props.method()
   }, --&amp;gt;
   onCancel () {
   }
 })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;后端返回的 { responseType: ‘blob’ }数据，需要用react-file-download转化;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import FileDownload from 'react-file-download'
 this.props.actions.downloadPictures(this.props.selectedIds).then((res) =&amp;gt; {
   // 不能加if(res.data.success)的判断，因为返回的数据是blob，找不到res.data.success
   FileDownload(res.data, 'images.zip')
   this.props.cancelSelected()
 })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;下载文件时，很可能需要写responseType,否则可能打不开文件：&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;axios.put(this.url + '/zip', data, {
 responseType: 'blob',
 headers: { 'x-access-token': localStorage.token }
  })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Fetch请求可以直接在控制台调用
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; let content = {some: 'content'}
 // Post request with fetch
 fetch('some-url', {
   method: 'post',
   headers: {'Content-Type': 'application/json'}
   body: JSON.stringify(content)
 }).then(status)
 .then(json)
 .then(function(data){
     console.log(&quot;请求成功，JSON解析后的响应数据为:&quot;,data);
 })
 .catch(function(err){
     console.log(&quot;Fetch错误:&quot;+err);
 });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/32bef36a68a0&quot;&gt;Element.scrollIntoView() 方法让当前的元素滚动到浏览器窗口的可视区域内&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35087256/article/details/84963644&quot;&gt;next.js中的window is not defined&lt;/a&gt;:next.js文档中提供了一种动态导入模块的办法’next/dynamic’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;url-loader和file-loader
    &lt;ul&gt;
      &lt;li&gt;url-loader依赖file-loader&lt;/li&gt;
      &lt;li&gt;当使用url-loader加载图片，图片大小小于上限值，则将图片转base64字符串；否则使用file-loader加载图片，都是为了提高浏览器加载图片速度。&lt;/li&gt;
      &lt;li&gt;使用url-loader加载图片比file-loader更优秀&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u011500781/article/details/52896368&quot;&gt;js实现窗口全屏示例&lt;/a&gt;:无URL、导航栏等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bbs.aliyun.com/read/541396.html&quot;&gt;如何实现图片缩放?&lt;/a&gt;:将图片按照要求生成缩略图，或者进行特定的缩放(阿里云)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;数字分割：&lt;a href=&quot;https://blog.csdn.net/spicyboiledfish/article/details/77776357&quot;&gt;JavaScript之如何让数字千位分割&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&quot;https://blog.csdn.net/evangel_z/article/details/12839657&quot;&gt;JS 数字，金额 用逗号 隔开&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments&quot;&gt;arguments对象&lt;/a&gt;:
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;arguments对象不是一个 Array 。它类似于Array，但除了length属性和索引元素之外没有任何Array属性。例如，它没有 pop 方法。但是它可以被转换为一个真正的Array：&lt;/p&gt;
          &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var args = Array.prototype.slice.call(arguments);
var args = [].slice.call(arguments);
// ES2015
const args = Array.from(arguments);
const args = [...arguments];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;          &lt;/div&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;momentJS问题：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/ASZJBGD/article/details/85252658&quot;&gt;东八区问题 moment().format() 有时间差&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/littlebearGreat/article/details/80996346&quot;&gt;解决Moment格式化时间出现时区差的问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;url出现了有+，空格，/，?，%，#，&amp;amp;，=等特殊符号的时候，可能在服务器端无法获得正确的参数值（当参数中含有”#”这些等对于URI而言有着特殊含义的符号时，发现“#”字符后面的信息全被裁掉了）:
    &lt;ul&gt;
      &lt;li&gt;在拼接参数的时候，使用 encodeURIComponent() 进行手动转义：
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var url = &quot;xxx?name=&quot; + encodeURIComponent( &quot;wz#aa&quot; );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;用其他字符替换，如：
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;
 var str = '少林寺3#101';
 var result = str.replace(/#/g, '%23');
   &lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;antD Form组件中，Form.Item中有带htmlType=’submit’属性的Button时，会导致在Form中回车提交表单，删除htmlType=’submit’，然后给Button加一个提交的onClick事件即可；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;JS中为什么[‘1’,’7’,’11’].map(parseInt)返回[1,NaN,3]?
    &lt;ul&gt;
      &lt;li&gt;map返回3个参数，item，index，Array，所以[1,7,11].map(console.log)打印：
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1 0 (3) [1, 7, 11]
  7 1 (3) [1, 7, 11]
  11 2 (3) [1, 7, 11]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;parseInt接受两个参数：string，radix，其中radix默认为10；每次调用parseInt，相当于：parseInt(item,index,Array),map传递的第三个参数Array会被忽略,index为0时取默认值10；parseInt(7,1)中，7在1进制中不存在。
        &lt;blockquote&gt;
          &lt;p&gt;参考：&lt;a href=&quot;https://mp.weixin.qq.com/s/h-hxPt1yN2shq-Dkq6S3dA&quot;&gt;JS 中为啥 [‘1’, ‘7’, ‘11’].map(parseInt) 返回 [1, NaN, 3]&lt;/a&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/4f07ef18b5d7&quot;&gt;MessageChannel是什么，怎么使用？&lt;/a&gt;：MessageChannel的postMessage传递的数据也是深拷贝的，这和web worker的postMessage一样，而且还可以拷贝undefined和循环引用的对象,如下所示： &lt;br /&gt;
MessageChannel创建了一个通信的管道，这个管道有两个端口，每个端口都可以通过postMessage发送数据，而一个端口只要绑定了onmessage回调方法，就可以接收从另一个端口传过来的数据。
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function structuralClone(obj) {
  return new Promise(resolve =&amp;gt; {
    const { port1, port2 } = new MessageChannel()
    port2.onmessage = ev =&amp;gt; resolve(ev.data)
    port1.postMessage(obj)
  })
}

var obj = {
  a: 1,
  b: {
    c: 2
  }
}

obj.b.d = obj.b

// 注意该方法是异步的
// 可以处理 undefined 和循环引用对象
const test = async () =&amp;gt; {
  const clone = await structuralClone(obj)
  console.log(clone)
}
test()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/656e6101bf0f&quot;&gt;在个人博客里添加评论系统–Gitalk&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;html&quot;&gt;HTML&lt;/h2&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2018/12/css-position-sticky/&quot;&gt;position: sticky粘性定位&lt;/a&gt;:除了文章介绍的之外，左右布局，左sticky时，左边还要设置高度才可生效(如：100vh)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 示例代码：
 .left-container {
   width: 200px;
   height: 100vh;
   position: sticky;
   top: 0px;
   bottom: 0;
   background-color: #ffffff;
   border-right: solid 1px rgb(233, 233, 233);
   overflow: auto;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/benbendu/p/5811534.html&quot;&gt;【CSS深入理解之z-index】听课总结&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/27bb9a9d4f03&quot;&gt;ant design Tooltip文字提示的样式设置&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;可以通过设置mouseLeaveDelay控制Tooltip在页面的时间，然后chrome就可以查看元素了；&lt;/li&gt;
      &lt;li&gt;直接用  ant-tooltip-  在页面并无法修改它的样式；&lt;/li&gt;
      &lt;li&gt;通过自定义的类名以及类名下的标签就可以修改其样式,如下所示:
(先给Tooltip添加一个overlayClassName={styles[‘tooltip-custom’]})
&lt;img src=&quot;https://github.com/king-hcj/king-hcj.github.io/blob/master/images/posts/comprehensive/tooltip.png?raw=true&quot; alt=&quot;ant design Tooltip文字提示的样式设置&quot; /&gt; &lt;br /&gt;
例： tooltip 黑色背景改成白色不透明
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   .tooltip-custom {
     div {
       div {
         &amp;amp;:first-child {
           display: none;
         }
        
         &amp;amp;:last-child {
           padding: 0px;
           background-color: rgba(255, 255, 255, 1);
         }
       }
     }
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;React行内calc的使用：style=&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u013044310/article/details/80444695&quot;&gt;Chrome浏览器百度云倍速播放&lt;/a&gt;：
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; videojs.getPlayers(&quot;video-player&quot;).html5player.tech_.setPlaybackRate(1.5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/syhyz1990/baiduyun&quot;&gt;百度网盘直链下载助手&lt;/a&gt;(亲测有效)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.runningcheese.com/baiduyun&quot;&gt;3个方法解决百度网盘限速 （2019-07-04 更新）&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;查看整个项目的代码行数
    &lt;ul&gt;
      &lt;li&gt;打开终端，用cd命令定位到工程所在的目录，然后调用以下命名即可把每个源代码文件行数及总数统计出来(适用于前端项目，只要改文件后缀即可)：
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; find . &quot;(&quot; -name &quot;*.m&quot; -or -name &quot;*.mm&quot; -or -name &quot;*.cpp&quot; -or -name &quot;*.h&quot; -or -name &quot;*.rss&quot; &quot;)&quot; -print | xargs wc -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;h1 id=&quot;代码规范规约&quot;&gt;代码规范/规约&lt;/h1&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt;: 当多人团队进行一个项目开发时，每个人可能喜欢的编辑器不同，有人喜欢Webstrom、有人喜欢sublime、还有人喜欢Hbuilder。这个时候，问题便迎面而来，如何使使用不同编辑器的开发者能够轻松惬意的遵守最基本的代码规范呢？ &lt;br /&gt;
EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cn.eslint.org/&quot;&gt;ESLint&lt;/a&gt;+&lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;个人学习规划学习视频书籍目录整理&quot;&gt;个人学习规划/学习视频书籍目录整理&lt;/h1&gt;
&lt;h2 id=&quot;通用课程数据结构算法网络&quot;&gt;通用课程(数据结构、算法、网络)&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/154.html&quot;&gt;快速上手Linux 玩转典型应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://class.imooc.com/newjava&quot;&gt;慕课Java就业班&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/260.html&quot;&gt;专为程序员设计的线性代数课程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/71.html&quot;&gt;学习算法思想 修炼编程内功&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/207.html&quot;&gt;玩转数据结构 从入门到进阶&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/82.html&quot;&gt;玩转算法面试 从真题到思维全面提升算法思维&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.imooc.com/t/108955&quot;&gt;慕课算法讲师推荐：liuyubobobo&lt;/a&gt;
    &lt;h2 id=&quot;前端&quot;&gt;前端&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;Node.js:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/146.html&quot;&gt;Node.js入门到企业Web开发中的应用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/320.html&quot;&gt;前端晋升全栈工程师必备课程 Node.js 从零开发web server博客项目&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;小程序：
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/chapter/75.html#Anchor&quot;&gt;微信小程序入门与实战&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Javascript:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/255.html&quot;&gt;Javascript 设计模式系统讲解与应用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/330.html&quot;&gt;基于TypeScript从零重构axios&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;HTML/CSS:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/15.html&quot;&gt;Web App用组件方式开发全站&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/164.html&quot;&gt;全面系统讲解CSS 工作应用+面试一步搞定&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/50.html&quot;&gt;所向披靡的响应式开发&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/115.html&quot;&gt;前端JavaScript面试技巧&lt;/a&gt;(视情)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/129.html&quot;&gt;前端跳槽面试必备技巧&lt;/a&gt;(视情)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;React/Vue/Angular:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/309.html&quot;&gt;React源码深度解析 高级前端工程师必备技能&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/203.html&quot;&gt;Vue2.5开发去哪儿网App 从零基础入门到实战项目&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Webpack:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/316.html&quot;&gt;从基础到实战	手把手带你掌握新版Webpack4.0&lt;/a&gt;
        &lt;h2 id=&quot;移动端&quot;&gt;移动端&lt;/h2&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/304.html&quot;&gt;新版React Native+Redux打造高质量上线App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/321.html&quot;&gt;Flutter从入门到进阶 实战携程网App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/286.html&quot;&gt;Socket网络编程进阶与实战&lt;/a&gt;
    &lt;h2 id=&quot;后端&quot;&gt;后端&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding.imooc.com/class/180.html&quot;&gt;Google资深工程师深度讲解Go语言&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;文章&quot;&gt;文章&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot;&gt;RESTful API 设计指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot;&gt;理解OAuth 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/62338c038c42&quot;&gt;Service Worker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/ysocean/category/1289968.html&quot;&gt;Nginx详解&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;个人web页面构想非静态&quot;&gt;个人web页面构想(非静态)&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;登录授权隐私内容/非登录&lt;/li&gt;
  &lt;li&gt;图片/游记展示&lt;/li&gt;
  &lt;li&gt;文档/博客/学习笔记展示&lt;/li&gt;
  &lt;li&gt;文档的增/删/改/查&lt;/li&gt;
  &lt;li&gt;爱好展示&lt;/li&gt;
  &lt;li&gt;访问量统计&lt;/li&gt;
  &lt;li&gt;基于jekyll-now的个人博客解决方案
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/barryclark/jekyll-now&quot;&gt;jekyll-now&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/mzlogin/mzlogin.github.io&quot;&gt;参考页面&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;主题选择&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Cheney King</name></author><summary type="html">这些是在搭建本博客之前，在工作中进行的一些总结，篇幅略长。</summary></entry><entry><title type="html">箭头函数和普通函数的区别</title><link href="http://localhost:4000/2019/12/21/func-and-arrow-func/" rel="alternate" type="text/html" title="箭头函数和普通函数的区别" /><published>2019-12-21T00:00:00+08:00</published><updated>2019-12-21T00:00:00+08:00</updated><id>http://localhost:4000/2019/12/21/func-and-arrow-func</id><content type="html" xml:base="http://localhost:4000/2019/12/21/func-and-arrow-func/">&lt;p&gt;今天在阿里淘宝的电话面试中被问到箭头函数和普通函数的区别，没能回答全面，现进行总结如下：&lt;/p&gt;

&lt;p&gt;ES6标准新增了一种新的函数：Arrow Function（箭头函数），为什么叫Arrow Function？因为它的定义用的就是一个箭头，那么，它和普通函数有哪些不同呢？&lt;/p&gt;

&lt;h3 id=&quot;箭头函数的特点&quot;&gt;箭头函数的特点&lt;/h3&gt;
&lt;p&gt;箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种只包含一个表达式，连{ … }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ … }和return。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;相比普通函数，箭头函数有更简洁的语法&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;箭头函数不绑定this，会捕获其所在的上下文的this值，作为自己的this值&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。&lt;/li&gt;
        &lt;li&gt;把动态this转换为静态this：长期以来，JavaScript 语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。箭头函数”绑定”this，很大程度上解决了这个困扰。&lt;/li&gt;
        &lt;li&gt;箭头函数可以让this指向固定化，这种特性很有利于封装回调函数。&lt;/li&gt;
        &lt;li&gt;原理: this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;箭头函数是匿名函数，不能作为构造函数，不可以使用new命令，否则会抛出一个错误。所以箭头函数也不具有new.target。
    &lt;blockquote&gt;
      &lt;p&gt;原因：构造函数的new都做了些什么？简单来说，分为四步&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;ul&gt;
      &lt;li&gt;JS内部首先会先生成一个对象；&lt;/li&gt;
      &lt;li&gt;再把函数中的this指向该对象；&lt;/li&gt;
      &lt;li&gt;然后执行构造函数中的语句；&lt;/li&gt;
      &lt;li&gt;最终返回该对象实例。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;箭头函数不绑定arguments，取而代之用rest参数…解决；所以箭头函数也没有arguments.callee和arguments.caller&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;p&gt;不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。想要在箭头函数中以类似数组的形式取得所有参数，可以利用展开运算符来接收参数，比如：&lt;/p&gt;
      &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   const testFunc = (...args)=&amp;gt;{
       console.log(args) //数组形式输出参数
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;在 ECMAScript 6 之前的函数声明中，它们的参数都是“简单参数类型”的。在 ECMAScript 6 之后，凡是在参数声明中使用了缺省参数、剩余参数和模板参数之一的，都不再是“简单的”（non-simple parameters）。 &lt;br /&gt;
在使用传统的简单参数时，只需要将调用该参数时传入的实际参数与参数对象（arguments）绑定就可以了；而使用“非简单参数”时，需要通过“初始器赋值”来完成名字与值的绑定。 &lt;br /&gt;
两种绑定模式的区别在于：通常将实际参数与参数对象绑定时，只需要映射两个数组的下标即可，而“初始器赋值”需要通过名字来索引值（以实现绑定），因此一旦出现“重名参数”就无法处理了。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;使用call()、apply()和bind()调用，对 this 没有什么影响
    &lt;blockquote&gt;
      &lt;p&gt;由于 this 已经在词法层面完成了绑定，通过 call()、 apply()、bind() 方法调用一个函数时，只传入了一个参数，对 this 并没有什么影响&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;箭头函数没有原型属性prototype&lt;/li&gt;
  &lt;li&gt;不能简单返回对象字面量
    &lt;blockquote&gt;
      &lt;p&gt;如果要直接返回对象时需要用小括号包起来，因为大括号被占用解释为代码块了&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;不能使用yield关键字，因此箭头函数不能用作 Generator 函数。&lt;/li&gt;
  &lt;li&gt;箭头函数括号后面不能换行；&lt;/li&gt;
  &lt;li&gt;箭头函数不具有super。
    &lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;箭头函数的 this 永远指向其上下文的  this ，任何方法都改变不了其指向，如 call() ,  bind() ,  apply() ，可以说正是因为没有自己的this，才使其具备了以上介绍的大部分特点；&lt;/li&gt;
  &lt;li&gt;普通函数的this指向调用它的那个对象&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Cheney King</name></author><summary type="html">今天在阿里淘宝的电话面试中被问到箭头函数和普通函数的区别，没能回答全面，现进行总结如下：</summary></entry><entry><title type="html">JS技巧技法总结</title><link href="http://localhost:4000/2019/08/08/js-skills/" rel="alternate" type="text/html" title="JS技巧技法总结" /><published>2019-08-08T00:00:00+08:00</published><updated>2019-08-08T00:00:00+08:00</updated><id>http://localhost:4000/2019/08/08/js-skills</id><content type="html" xml:base="http://localhost:4000/2019/08/08/js-skills/">&lt;p&gt;开发、阅读、学习中接触到的一些知识点。&lt;/p&gt;

&lt;h2 id=&quot;js技巧&quot;&gt;JS技巧&lt;/h2&gt;
&lt;h3 id=&quot;js计数器的几种实现&quot;&gt;JS计数器的几种实现&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;全局变量
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;
    let count = 0;
    const countUp = () =&amp;gt; count++;
   &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;闭包
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   // javascript
    const countUp = (() =&amp;gt; {
    let count = 0;
    return () =&amp;gt; {
   return ++count;
    };
    })();
    console.log(countUp()); // 1
    console.log(countUp()); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;函数属性
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   // javascript
    let countUp = () =&amp;gt; {
    return ++countUp.count;
    };
    countUp.count = 0;
    console.log(countUp()); // 1
    console.log(countUp()); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;函数属性(TS)
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   interface Counter {
    (): void; // 这里定义Counter这个结构必须包含一个函数，函数的要求是无参数，返回值为void，即无返回值
    count: number; // 而且这个结构还必须包含一个名为count、值的类型为number类型的属性
    }
    const getCounter = (): Counter =&amp;gt; { // 这里定义一个函数用来返回这个计数器
    const c = () =&amp;gt; { // 定义一个函数，逻辑和前面例子的一样
   c.count++;
    };
    c.count = 0; // 再给这个函数添加一个count属性初始值为0
    return c; // 最后返回这个函数对象
    };
    const counter: Counter = getCounter(); // 通过getCounter函数得到这个计数器
    counter();
    console.log(counter.count); // 1
    counter();
    console.log(counter.count); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;前端语音&quot;&gt;前端语音&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;语音播报：在项目中需要对ajax请求返回的消息进行语音播报,str 为返回的data
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  //语音播报
  function voiceAnnouncements(str){
      //百度
      var url = &quot;http://tts.baidu.com/text2audio?lan=zh&amp;amp;ie=UTF-8&amp;amp;text=&quot; + encodeURI(str);        // baidu
      var n = new Audio(url);
      n.src = url;
      n.play();
  }
  voiceAnnouncements('你好，今天吃的什么？')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ak1394/react-native-tts&quot;&gt;React Native Text-To-Speech library for Android and iOS&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;语音识别:
    &lt;ul&gt;
      &lt;li&gt;语音控制网站 &lt;a href=&quot;https://github.com/TalAter/annyang&quot;&gt;annyang&lt;/a&gt;:
  A tiny JavaScript Speech Recognition library that lets your users control your site with voice commands. &lt;br /&gt;
annyang has no dependencies, weighs just 2 KB, and is free to use and modify under the MIT license.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;数组展开的n种方法&quot;&gt;数组展开的N种方法&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;循环加递归&lt;/li&gt;
  &lt;li&gt;flat&lt;/li&gt;
  &lt;li&gt;flatMap&lt;/li&gt;
  &lt;li&gt;toString后split&lt;/li&gt;
  &lt;li&gt;join后split&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Cheney King</name></author><summary type="html">开发、阅读、学习中接触到的一些知识点。</summary></entry><entry><title type="html">《React全家桶+AntD 共享单车后台管理系统开发》笔记</title><link href="http://localhost:4000/2019/05/23/AntD/" rel="alternate" type="text/html" title="《React全家桶+AntD 共享单车后台管理系统开发》笔记" /><published>2019-05-23T00:00:00+08:00</published><updated>2019-05-23T00:00:00+08:00</updated><id>http://localhost:4000/2019/05/23/AntD</id><content type="html" xml:base="http://localhost:4000/2019/05/23/AntD/">&lt;p&gt;课程《React全家桶+AntD 共享单车后台管理系统开发》参见&lt;a href=&quot;https://coding.imooc.com/class/236.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;yarn介绍&quot;&gt;yarn介绍&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;yarn是新一代包管理工具
    &lt;ul&gt;
      &lt;li&gt;Facebook联合其他公司开发，觉得npm有缺陷&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;为什么使用yarn：
    &lt;ul&gt;
      &lt;li&gt;速度快&lt;/li&gt;
      &lt;li&gt;安装版本统一，更安全（lock文件）&lt;/li&gt;
      &lt;li&gt;更简洁的输出&lt;/li&gt;
      &lt;li&gt;更好的语义化&lt;/li&gt;
      &lt;li&gt;没有颠覆npm，只是修复了缺陷&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如何使用yarn
    &lt;ul&gt;
      &lt;li&gt;yarn init 初始化项目&lt;/li&gt;
      &lt;li&gt;yarn add 安装包&lt;/li&gt;
      &lt;li&gt;yarn remove 删除包&lt;/li&gt;
      &lt;li&gt;yarn/yarn install 安装项目依赖&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;node_modules:项目的安装依赖&lt;/p&gt;

&lt;p&gt;AntD：基于less开发（test:less,less-loder）
计算属性calc：less中可以用@定义变量
less中可以嵌套书写，css不可以
less中可以通过@import导入文件（变量、less）&lt;/p&gt;

&lt;p&gt;vh：屏幕100等份，1份1vh，相当于1%，如定义高度height：calc（100vh）
栅格布局（Row，Col）&lt;/p&gt;

&lt;p&gt;暴露配置：yarn eject，改webpack.config文件,use数组从后向前运行&lt;/p&gt;

&lt;p&gt;React左右布局，点击左边，如何使内容出现在右侧：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;点击左侧，触发方法，改变右侧组件渲染&lt;/li&gt;
  &lt;li&gt;路由匹配（this.props.children）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;三角形：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   .three{
      width: 0;
      height: 0;
      border-width: 40px;
      border-style: solid;
      border-color: red transparent transparent transparent;
      &amp;lt;!-- border-color: red yellow green black; --&amp;gt;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;多级（不定级）菜单渲染：递归SubMenu =&amp;gt; Menu.Item&lt;/p&gt;

&lt;p&gt;React Router 4.0：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;react-router-dom：web端安装&lt;/li&gt;
  &lt;li&gt;4.0版 已不需要路由配置，一切皆组件&lt;/li&gt;
  &lt;li&gt;HashRouter（根路由）和BrowserRouter（/，/更多是接口请求）&lt;/li&gt;
  &lt;li&gt;Route:增加Render方法&lt;/li&gt;
  &lt;li&gt;Link（导航）、NavLink&lt;/li&gt;
  &lt;li&gt;Switch，只匹配第一个匹配的路由&lt;/li&gt;
  &lt;li&gt;Redirect：路由重定向&lt;/li&gt;
  &lt;li&gt;混合组件化；允许一次匹配多个（加exact避免，或用Switch匹配第一个）&lt;/li&gt;
  &lt;li&gt;动态路由参数获取：this.props.match.params.value&lt;/li&gt;
  &lt;li&gt;不匹配任何组件：Route不配置path，只写一个component&lt;/li&gt;
  &lt;li&gt;子路由：不通过component，而是通过render方法return组件，内部配置子路由，父路由不能使用精准匹配&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不写bind（this），内部不能使用类似this.setState等带this的；&lt;/p&gt;

&lt;p&gt;AntD UI组件：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;面向后台管理系统；&lt;/li&gt;
  &lt;li&gt;import {Button} from ‘antd’;&lt;/li&gt;
  &lt;li&gt;Button图形按钮：type，shape，icon；&lt;/li&gt;
  &lt;li&gt;Loading按钮：动态控制loading = {true/false}；&lt;/li&gt;
  &lt;li&gt;overflow：auto（超出部分自动滚动，而非全屏滚动，在左右布局左侧固定，右侧内容较多时可以使用）；&lt;/li&gt;
  &lt;li&gt;绑定方法时，不传参，不需要箭头函数；传参，必须通过箭头函数或者bind实现，如果直接this.method(arg)会自动执行，应该写成（）=&amp;gt;this.method(arg)；&lt;/li&gt;
  &lt;li&gt;通过传不同的参数type控制多个弹窗的显示隐藏小技巧：
    &lt;ul&gt;
      &lt;li&gt;this.setState（{[type]:true}），此时[type]就相当于是一个变量，避免了写if语句判断给哪个值设置true；&lt;/li&gt;
      &lt;li&gt;Modal.confirm,Modal[‘confirm’],Modal.success,Modal.info等,可用Modal[type]来代替，只需传入不同的type&lt;/li&gt;
      &lt;li&gt;this&lt;a href=&quot;targetKey&quot;&gt;action&lt;/a&gt;:传递参数targetKey，根据action调用相应方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;const，内存地址不能更改；&lt;/li&gt;
  &lt;li&gt;tab可编辑（添加删除）：
    &lt;ul&gt;
      &lt;li&gt;删除的不是当前选中（激活）的tab&lt;/li&gt;
      &lt;li&gt;删除的是当前激活的tab&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;map（）方法会返回新的数组，不会改变原数组&lt;/li&gt;
  &lt;li&gt;public下的文件会部署的服务器的根目录，所以用‘/’访问&lt;/li&gt;
  &lt;li&gt;图片画廊：card，card.meta,row（gutter），col，modal实现（单行，多列，每列多个，每个图片尺寸不同，点击查看大图）&lt;/li&gt;
  &lt;li&gt;this.props.form、getFieldDecorator需结合Form.create进行表单验证；可以用一个值为icon的prefix（前缀）使得输入框内部前部显示图标等；&lt;/li&gt;
  &lt;li&gt;easy-mock：数据在线模拟&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Cheney King</name></author><summary type="html">课程《React全家桶+AntD 共享单车后台管理系统开发》参见这里。</summary></entry><entry><title type="html">慕课视频等综合学习笔记</title><link href="http://localhost:4000/2018/12/12/aiyongbao-study/" rel="alternate" type="text/html" title="慕课视频等综合学习笔记" /><published>2018-12-12T00:00:00+08:00</published><updated>2018-12-12T00:00:00+08:00</updated><id>http://localhost:4000/2018/12/12/aiyongbao-study</id><content type="html" xml:base="http://localhost:4000/2018/12/12/aiyongbao-study/">&lt;p&gt;包括在爱用宝工作及慕课课程学习总结的一些笔记。&lt;/p&gt;

&lt;h2 id=&quot;markdown基本语法参考&quot;&gt;&lt;a href=&quot;https://www.jianshu.com/p/191d1e21f7ed&quot;&gt;Markdown基本语法参考&lt;/a&gt;&lt;/h2&gt;
&lt;h1 id=&quot;react-164-开发简书项目&quot;&gt;React 16.4 开发简书项目:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://coding.imooc.com/class/229.html&quot;&gt;从零基础入门到实战&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;生命周期函数：指在某一时刻组件会自动调用执行的函数&lt;/p&gt;

&lt;p&gt;动画：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015487495&quot;&gt;react-transition-group 思否&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactcommunity.org/react-transition-group/&quot;&gt;react-transition-group 官网&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;React、React.js、React Native三者的关系&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;React：
React 是基础框架，是一套基础设计实现理念，开发者不能直接使用它来开发移动应用或者网页。&lt;/li&gt;
  &lt;li&gt;React.js:
在React框架之上，发展出了React.js 框架来开发网页。&lt;/li&gt;
  &lt;li&gt;React Native：
在React框架之上，发展出来React Native 用来开发移动应用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为React 基础框架与React.js框架是同时出现、同时进化发展的，这就造成了React基础框架的基本概念、设计思想都是在React.js的相关文档中描述的。后来，Facebook推出了React Native 后，也没有把React的相关概念文档从React.js文档中分离出来。这就导致出现了学React Native 要去看React.js文档，说React Native 不时会说到React.js的情况。&lt;/p&gt;

&lt;p&gt;使用React.Children.map而不是props.children.map遍历： &lt;br /&gt;
React.Children.map的实现考虑到 props.children 可能是一个数组或一个对象。&lt;/p&gt;

&lt;p&gt;key值的作用： &lt;br /&gt;
一列节点中的一个发生了改变，React并没有什么好方法来处理这个问题。循环新旧两个列表，并找出不同是React唯一的处理方法。但是，有一个可以把这个算法的复杂度降低的办法。那就是我们在生成一列节点的时候给每一个节点上添加一个key。这个key只需要在这一列节点中唯一，不需要全局唯一。&lt;/p&gt;

&lt;p&gt;ref: &lt;br /&gt;
经常误解的是，您需要使用类组件才能使用 ref ，但 ref 也可以通过利用 JavaScript 中的 闭包 与 功能组件functional components一起使用。例如：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function CustomForm ({handleSubmit}) {
  let inputElement
  return (
    &amp;lt;form onSubmit={() =&amp;gt; handleSubmit(inputElement.value)}&amp;gt;
      &amp;lt;input
        type='text'
        ref={(input) =&amp;gt; inputElement = input} /&amp;gt;
      &amp;lt;button type='submit'&amp;gt;Submit&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文章力荐：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/sinat_17775997/article/details/69938720&quot;&gt;React 常见的面试题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/41312576&quot;&gt;理解 React，但不理解 Redux，该如何通俗易懂的理解 Redux？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;图表库-antv---g2&quot;&gt;图表库 AntV - G2&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oschina.net/p/antv-g2&quot;&gt;数据驱动的高交互可视化图形语法 AntV - G2&lt;/a&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import G2 from '@antv/g2';   
  const chart = new G2.Chart({   
 container: 'c1',   
 width: 600,   
 height: 300   
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.yuque.com/antv/g2-docs&quot;&gt;G2 文档:G2 API 和教程文档&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;http协议原理实践-web开发工程师必学&quot;&gt;HTTP协议原理+实践 Web开发工程师必学&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://coding.imooc.com/class/225.html&quot;&gt;HTTP协议原理+实践 Web开发工程师必学&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;低三层：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;物理层：定义物理设备如何传输数据&lt;/li&gt;
  &lt;li&gt;数据链路层：在通信实体间建立数据链路连接（电路）&lt;/li&gt;
  &lt;li&gt;网络层：为数据在结点间传输创建逻辑链路&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;传输层：
端到端，向高层屏蔽细节&lt;/p&gt;

&lt;p&gt;应用层：构建于TCP协议之上，屏蔽网络传输细节&lt;/p&gt;

&lt;p&gt;URI(统一资源标识符)：包含URL(统一资源定位器)和URN(永久统一资源定位符，资源移动后还能找到)&lt;/p&gt;

&lt;p&gt;Get、Post、Put方法等只是语义话方法（建议），无强约束。&lt;/p&gt;

&lt;p&gt;Etag:数据签名(最常见：hash计算。if-Match、if-Non-Match)。&lt;/p&gt;

&lt;p&gt;axios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。&lt;/p&gt;

&lt;h1 id=&quot;web攻城狮培养计划之进击javascript核心视频课程&quot;&gt;Web攻城狮培养计划之进击JavaScript核心视频课程&lt;/h1&gt;
&lt;p&gt;堆内存、栈内存：
   基本类型，按值访问；保存在栈内存中(有序好查找，固定大小，不可修改，修改变量实际是覆盖)；
   引用类型,按引用访问；大小不固定，保存在堆内存中，可修改；无序，难以定位，所以把地址保存在栈内存中，通过地址查找。
参数传递：按值传递（引用类型传递的是地址，也是值）&lt;/p&gt;

&lt;p&gt;作用域：全局作用域，局部作用域（函数作用域）；没有块级作用域&lt;/p&gt;

&lt;p&gt;JS解析：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;先预解析（所有变量，在正式运行代码之前，都提前赋一个值：undefined；所有的函数，在正式运行代码之前都是整个函数块）;逐行代码解析（fn1()函数内部再发生{（1）预解析（2）逐行代码解析}）；&lt;/li&gt;
  &lt;li&gt;遇到重名，变量和函数重名，就留下函数，与上下关系没有关系，注:只先找var(包括参数。其他无var的，不会预解析) ，function声明的；&lt;/li&gt;
  &lt;li&gt;预解析不影响执行时的赋值，如var 了变量a和函数a，预解析时函数覆盖掉变量，但是执行的时候，还是可以给a赋值，所以可能会造成函数无法执行的问题；&lt;/li&gt;
  &lt;li&gt;预解析是分标签进行的（script），前一个标签定义赋值，后一个打印可以；换过来不行；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/yehui-mmd/p/6095041.html&quot;&gt;JS解析+预解析相关总结&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;垃圾回收机制：释放无用数据，回收内存&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自动&lt;/li&gt;
  &lt;li&gt;手动&lt;/li&gt;
  &lt;li&gt;原理：找出无用数据，打上标记，释放其内存；周期性执行。
    &lt;ul&gt;
      &lt;li&gt;标记清除&lt;/li&gt;
      &lt;li&gt;引用计数（变量访问对象）：问题在于循环引用，得不到释放&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;内存管理：web浏览器 &amp;lt; 桌面应用程序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;资料参考：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/89a377c52b48&quot;&gt;没错，就是Access-Control-Allow-Origin，跨域&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012469713&quot;&gt;ajax跨域，这应该是最全的解决方案了&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ykloveyxk.github.io/2017/02/25/axios%E5%85%A8%E6%94%BB%E7%95%A5/#more&quot;&gt;axios全攻略&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/35123b048e5e&quot;&gt;前端｜浅谈fetch&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;react-native&quot;&gt;React Native&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1615907407534131792&amp;amp;wfr=spider&amp;amp;for=pc&quot;&gt;看看React Native和React.js之间的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/xiangzhihong8/article/details/52623852&quot;&gt;React Native运行原理解析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qizhenshuai/article/details/78202472&quot;&gt;React、React Native面试题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://weibo.com/1712131295/CoRnElNkZ?ref=collection&amp;amp;type=comment#_rnd1554724921355&quot;&gt;CSS3 Flexbox 口诀&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/elzza/article/details/78878806&quot;&gt;IOS与安卓的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/372034fc2f2e&quot;&gt;iOS与安卓的区别 浅谈ios为什么比安卓流畅&lt;/a&gt;：
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;有了优先级的关系，有了GPU加速的影响，还有两个系统各自编程以及机制的问题，似乎已经可以说明为什么iOS相比Android更为流畅的原因，但最终还有一个问题是就是应用程序。&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/17cfac53578a&quot;&gt;iOS 开发是否要采用 React Native?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;抠图技术&quot;&gt;抠图技术&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;语义分割重在对每个像素的语义理解，将相同语义的像素分割为同一个部分，得到的结果就是若干个块状，至于块与块之间是否衔接自然则不考虑。抠图只将图片分成前景和背景两块，目的是拿到前景，好的抠图算法会对于头发等细节的处理效果比较精确。分割和抠图的另一个重要区别是分割是返回像素分类结果，分类结果是整型；而抠图返回的是属于前景或背景的概率p，在前景与背景交互区域会产生渐变的效果，使得抠图更加自然。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;抠图技术的核心问题是解以下公式：Ii = αFi + (1-α)Bi，其中Ii是图像当前可观察的像素，为已知量；α是透明度，F是前景像素，B是背景像素，这三个变量为未知量。对于这个公式的理解，可以把原始图像看做是前景和背景按照一定权重（α透明度）叠加组成的。对于完全确定是前景的像素，α = 1；对于完全确定是背景的像素，α = 0；对于不确定是前景还是背景的像素，α是介于0到1之间的浮点数。&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;来源：CSDN&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;原文：https://blog.csdn.net/qq_36165459/article/details/78549686&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I = αF +(1-α)B。一张图片I，应该由前景F和前景B合成，合成的方式，就是通过透明度α来操作。matting问题研究的是，如何通过左边的I，推测出右边的三个变量α、F和B，难度可想而知。在这篇文章中，作者给出了Triangulation Matting的方法，整体思想也很简单，既然matting原问题那么难，不如把条件放松，使得问题简单一些。假设我知道了B和I，那么有没有可能得到α和F，于是乎，作者提出了，针对同一张前景，切换背景，来计算得到前景和透明度的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为F、B和α都是未知的，要把这么多未知项都求出来显然很不容易。所以就需要增加一些附加的约束，通常，这种约以TriMap的形式给出。TriMap就是三元图，它是和待分割图像同等大小的一张图，但图中的像素只有三个取值，0、128（左右）和255。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;来源：&lt;a href=&quot;https://blog.csdn.net/baimafujinji/article/details/72863106?utm_source=gold_browser_extension&quot;&gt;自然抠图算法：以经典的贝叶斯抠图为例（Bayesian Matting）&lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;相关文章：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27852081?utm_source=itdadao&amp;amp;utm_medium=referral&quot;&gt;天干物燥，小心抠图 —— A journey of matting(知乎)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.juew.org/default.htm&quot;&gt;Jue Wang Computer Graphics and Vision Researcher&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ai.baidu.com/tech/body/seg&quot;&gt;百度AI人像分割(免费使用)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;小技巧&quot;&gt;小技巧&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;多行文本转数组:类似下面这样，带有换行符，需要转换成在SQL IN中可使用的数组
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;p&gt;技巧：``.replace(/\n/g,’,’).split(‘,’) &lt;br /&gt;
纵列文本&lt;/p&gt;
          &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   娜琪丝   
   泰和之恋   
   凯飞乐呵呵125212910   
   谭焕荣   
   wangp111111111   
   倍帅123   
   joonewatch1222   
   女神win   
   缪斯兔商城   
   yu727467052   
   tb78230558   
   wangjia2772489833   
   dainian   
   第一间店铺1   
   凰诏旗舰店   
   lijinxuan123   
   rthz李杰   
   为你我要好好的   
   余锦盟123   
   乐派成人用品专营店   
   jayvsliangw   
   tb3228464532   
   fxj12345677   
   体坛风云302   
   anhuimaanshan   
   月光林地101   
   安小雨1   
   烟花夕颜冷   
   fvqrfvqr77   
   tb0400_72   
   快乐飞34   
   ranqingjun123   
   taobaotong0902   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;          &lt;/div&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;输出： &lt;br /&gt;
[“娜琪丝”, “泰和之恋”, “凯飞乐呵呵125212910”, “谭焕荣”, “wangp111111111”, “倍帅123”, “joonewatch1222”, “女神win”, “缪斯兔商城”, “yu727467052”, “tb78230558”, “wangjia2772489833”, “dainian”, “第一间店铺1”, “凰诏旗舰店”, “lijinxuan123”, “rthz李杰”, “为你我要好好的”, “余锦盟123”, “乐派成人用品专营店”, “jayvsliangw”, “tb3228464532”, “fxj12345677”, “体坛风云302”, “anhuimaanshan”, “月光林地101”, “安小雨1”, “烟花夕颜冷”, “fvqrfvqr77”, “tb0400_72”, “快乐飞34”, “ranqingjun123”, “taobaotong0902”]&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;</content><author><name>Cheney King</name></author><summary type="html">包括在爱用宝工作及慕课课程学习总结的一些笔记。</summary></entry><entry><title type="html">图解 SQL 里的各种 JOIN</title><link href="http://localhost:4000/2017/09/11/joins-in-sql/" rel="alternate" type="text/html" title="图解 SQL 里的各种 JOIN" /><published>2017-09-11T00:00:00+08:00</published><updated>2017-09-11T00:00:00+08:00</updated><id>http://localhost:4000/2017/09/11/joins-in-sql</id><content type="html" xml:base="http://localhost:4000/2017/09/11/joins-in-sql/">&lt;p&gt;文氏图和示例来理解 SQL 里的各种 JOIN。&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在各种问答社区里谈及 SQL 里的各种 JOIN 之间的区别时，最被广为引用的是 CodeProject 上 &lt;a href=&quot;https://www.codeproject.com/script/Membership/View.aspx?mid=5909363&quot;&gt;C.L. Moffatt&lt;/a&gt; 的文章 &lt;a href=&quot;https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins&quot;&gt;Visual Representation of SQL Joins&lt;/a&gt;，他确实讲得简单明了，使用文氏图来帮助理解，效果明显。本文将沿用他的讲解方式，稍有演绎，可以视为该文较为粗糙的中译版。&lt;/p&gt;

&lt;h2 id=&quot;约定&quot;&gt;约定&lt;/h2&gt;

&lt;p&gt;下文将使用两个数据库表 Table_A 和 Table_B 来进行示例讲解，其结构与数据分别如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SELECT * FROM Table_A ORDER BY PK ASC;
+----+---------+
| PK | Value   |
+----+---------+
|  1 | both ab |
|  2 | only a  |
+----+---------+
2 rows in set (0.00 sec)

mysql&amp;gt; SELECT * from Table_B ORDER BY PK ASC;
+----+---------+
| PK | Value   |
+----+---------+
|  1 | both ab |
|  3 | only b  |
+----+---------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 PK 为 1 的记录在 Table_A 和 Table_B 中都有，2 为 Table_A 特有，3 为 Table_B 特有。&lt;/p&gt;

&lt;h2 id=&quot;常用的-join&quot;&gt;常用的 JOIN&lt;/h2&gt;

&lt;h3 id=&quot;inner-join&quot;&gt;INNER JOIN&lt;/h3&gt;

&lt;p&gt;INNER JOIN 一般被译作内连接。内连接查询能将左表（表 A）和右表（表 B）中能关联起来的数据连接后返回。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文氏图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/inner-join.png&quot; alt=&quot;INNER JOIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_Value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------+------+---------+---------+
| A_PK | B_PK | A_Value | B_Value |
+------+------+---------+---------+
|    1 |    1 | both ab | both ab |
+------+------+---------+---------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;注：其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Table_A&lt;/code&gt; 的别名，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Table_B&lt;/code&gt; 的别名，下同。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;left-join&quot;&gt;LEFT JOIN&lt;/h3&gt;

&lt;p&gt;LEFT JOIN 一般被译作左连接，也写作 LEFT OUTER JOIN。左连接查询会返回左表（表 A）中所有记录，不管右表（表 B）中有没有关联的数据。在右表中找到的关联数据列也会被一起返回。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文氏图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/left-join.png&quot; alt=&quot;LEFT JOIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_Value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------+------+---------+---------+
| A_PK | B_PK | A_Value | B_Value |
+------+------+---------+---------+
|    1 |    1 | both ab | both ba |
|    2 | NULL | only a  | NULL    |
+------+------+---------+---------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;right-join&quot;&gt;RIGHT JOIN&lt;/h3&gt;

&lt;p&gt;RIGHT JOIN 一般被译作右连接，也写作 RIGHT OUTER JOIN。右连接查询会返回右表（表 B）中所有记录，不管左表（表 A）中有没有关联的数据。在左表中找到的关联数据列也会被一起返回。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文氏图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/right-join.png&quot; alt=&quot;RIGHT JOIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_Value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------+------+---------+---------+
| A_PK | B_PK | A_Value | B_Value |
+------+------+---------+---------+
|    1 |    1 | both ab | both ba |
| NULL |    3 | NULL    | only b  |
+------+------+---------+---------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;full-outer-join&quot;&gt;FULL OUTER JOIN&lt;/h3&gt;

&lt;p&gt;FULL OUTER JOIN 一般被译作外连接、全连接，实际查询语句中可以写作 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FULL OUTER JOIN&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FULL JOIN&lt;/code&gt;。外连接查询能返回左右表里的所有记录，其中左右表里能关联起来的记录被连接后返回。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文氏图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/full-outer-join.png&quot; alt=&quot;FULL OUTER JOIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_Value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FULL OUTER JOIN Table_B B
ON A.PK = B.PK' at line 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;注：我当前示例使用的 MySQL 不支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FULL OUTER JOIN&lt;/code&gt;。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;应当返回的结果（使用 UNION 模拟）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SELECT * 
    -&amp;gt; FROM Table_A
    -&amp;gt; LEFT JOIN Table_B 
    -&amp;gt; ON Table_A.PK = Table_B.PK
    -&amp;gt; UNION ALL
    -&amp;gt; SELECT *
    -&amp;gt; FROM Table_A
    -&amp;gt; RIGHT JOIN Table_B 
    -&amp;gt; ON Table_A.PK = Table_B.PK
    -&amp;gt; WHERE Table_A.PK IS NULL;
+------+---------+------+---------+
| PK   | Value   | PK   | Value   |
+------+---------+------+---------+
|    1 | both ab |    1 | both ba |
|    2 | only a  | NULL | NULL    |
| NULL | NULL    |    3 | only b  |
+------+---------+------+---------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;

&lt;p&gt;以上四种，就是 SQL 里常见 JOIN 的种类和概念了，看一下它们的合影：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/general-joins.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有没有感觉少了些什么，学数学集合时完全不止这几种情况？确实如此，继续看。&lt;/p&gt;

&lt;h2 id=&quot;延伸用法&quot;&gt;延伸用法&lt;/h2&gt;

&lt;h3 id=&quot;left-join-excluding-inner-join&quot;&gt;LEFT JOIN EXCLUDING INNER JOIN&lt;/h3&gt;

&lt;p&gt;返回左表有但右表没有关联数据的记录集。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文氏图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/left-join-excluding-inner-join.png&quot; alt=&quot;LEFT JOIN EXCLUDING INNER JOIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_Value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------+------+---------+---------+
| A_PK | B_PK | A_Value | B_Value |
+------+------+---------+---------+
|    2 | NULL | only a  | NULL    |
+------+------+---------+---------+
1 row in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;right-join-excluding-inner-join&quot;&gt;RIGHT JOIN EXCLUDING INNER JOIN&lt;/h3&gt;

&lt;p&gt;返回右表有但左表没有关联数据的记录集。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文氏图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/right-join-excluding-inner-join.png&quot; alt=&quot;RIGHT JOIN EXCLUDING INNER JOIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_Value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------+------+---------+---------+
| A_PK | B_PK | A_Value | B_Value |
+------+------+---------+---------+
| NULL |    3 | NULL    | only b  |
+------+------+---------+---------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;full-outer-join-excluding-inner-join&quot;&gt;FULL OUTER JOIN EXCLUDING INNER JOIN&lt;/h3&gt;

&lt;p&gt;返回左表和右表里没有相互关联的记录集。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文氏图：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/full-outer-join-excluding-inner-join.png&quot; alt=&quot;FULL OUTER JOIN EXCLUDING INNER JOIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_Value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为使用到了 FULL OUTER JOIN，MySQL 在执行该查询时再次报错。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FULL OUTER JOIN Table_B B
ON A.PK = B.PK
WHERE A.PK IS NULL
OR B.PK IS NULL' at line 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;应当返回的结果（用 UNION 模拟）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SELECT * 
    -&amp;gt; FROM Table_A
    -&amp;gt; LEFT JOIN Table_B
    -&amp;gt; ON Table_A.PK = Table_B.PK
    -&amp;gt; WHERE Table_B.PK IS NULL
    -&amp;gt; UNION ALL
    -&amp;gt; SELECT *
    -&amp;gt; FROM Table_A
    -&amp;gt; RIGHT JOIN Table_B
    -&amp;gt; ON Table_A.PK = Table_B.PK
    -&amp;gt; WHERE Table_A.PK IS NULL;
+------+--------+------+--------+
| PK   | Value  | PK   | Value  |
+------+--------+------+--------+
|    2 | only a | NULL | NULL   |
| NULL | NULL   |    3 | only b |
+------+--------+------+--------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;以上七种用法基本上可以覆盖各种 JOIN 查询了。七种用法的全家福：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/sql-joins.png&quot; alt=&quot;SQL JOINS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看着它们，我仿佛回到了当年学数学，求交集并集的时代……&lt;/p&gt;

&lt;p&gt;顺带张贴一下 &lt;a href=&quot;https://www.codeproject.com/script/Membership/View.aspx?mid=5909363&quot;&gt;C.L. Moffatt&lt;/a&gt; 带 SQL 语句的图片，配合学习，风味更佳：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/Visual_SQL_JOINS_orig.jpg&quot; alt=&quot;SQL JOINS&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;更新更多的-join&quot;&gt;更新：更多的 JOIN&lt;/h2&gt;

&lt;p&gt;除以上几种外，还有更多的 JOIN 用法，比如 CROSS JOIN（迪卡尔集）、SELF JOIN，可以参考 &lt;a href=&quot;https://www.w3resource.com/slides/sql-joins-slide-presentation.php&quot;&gt;SQL JOINS Slide Presentation&lt;/a&gt; 学习。&lt;/p&gt;

&lt;h3 id=&quot;cross-join&quot;&gt;CROSS JOIN&lt;/h3&gt;

&lt;p&gt;返回左表与右表之间符合条件的记录的迪卡尔集。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图示：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/database/cross-join.png&quot; alt=&quot;CORSS JOIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B_Value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------+------+---------+---------+
| A_PK | B_PK | A_Value | B_Value |
+------+------+---------+---------+
|    1 |    1 | both ab | both ba |
|    2 |    1 | only a  | both ba |
|    1 |    3 | both ab | only b  |
|    2 |    3 | only a  | only b  |
+------+------+---------+---------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面讲过的几种 JOIN 查询的结果都可以用 CROSS JOIN 加条件模拟出来，比如 INNER JOIN 对应 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CROSS JOIN ... WHERE A.PK = B.PK&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;self-join&quot;&gt;SELF JOIN&lt;/h3&gt;

&lt;p&gt;返回表与自己连接后符合条件的记录，一般用在表里有一个字段是用主键作为外键的情况。&lt;/p&gt;

&lt;p&gt;比如 Table_C 的结构与数据如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+--------+----------+-------------+
| EMP_ID | EMP_NAME | EMP_SUPV_ID |
+--------+----------+-------------+
|   1001 | Ma       |        NULL |
|   1002 | Zhuang   |        1001 |
+--------+----------+-------------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EMP_ID 字段表示员工 ID，EMP_NAME 字段表示员工姓名，EMP_SUPV_ID 表示主管 ID。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例查询：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在我们想查询所有有主管的员工及其对应的主管 ID 和姓名，就可以用 SELF JOIN 来实现。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMP_ID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMP_NAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMP_ID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP_SUPV_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMP_NAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMP_SUPV_NAME&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Table_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMP_SUPV_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EMP_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查询结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+--------+----------+-------------+---------------+
| EMP_ID | EMP_NAME | EMP_SUPV_ID | EMP_SUPV_NAME |
+--------+----------+-------------+---------------+
|   1002 | Zhuang   |        1001 | Ma            |
+--------+----------+-------------+---------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;补充说明&quot;&gt;补充说明&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;文中的图使用 Keynote 绘制；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;个人的体会是 SQL 里的 JOIN 查询与数学里的求交集、并集等很像；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SQLite 不支持 RIGHT JOIN 和 FULL OUTER JOIN，可以使用 LEFT JOIN 和 UNION 来达到相同的效果；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MySQL 不支持 FULL OUTER JOIN，可以使用 LEFT JOIN 和 UNION 来达到相同的效果。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins&quot;&gt;Visual Representation of SQL Joins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4796872/how-to-do-a-full-outer-join-in-mysql&quot;&gt;How to do a FULL OUTER JOIN in MySQL?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3resource.com/slides/sql-joins-slide-presentation.php&quot;&gt;SQL JOINS Slide Presentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3resource.com/sql/joins/perform-a-self-join.php&quot;&gt;SQL Self Join&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Cheney King</name></author><summary type="html">文氏图和示例来理解 SQL 里的各种 JOIN。</summary></entry><entry><title type="html">关于 Markdown 的一些奇技淫巧</title><link href="http://localhost:4000/2017/09/01/markdown-odd-skills/" rel="alternate" type="text/html" title="关于 Markdown 的一些奇技淫巧" /><published>2017-09-01T00:00:00+08:00</published><updated>2017-09-01T00:00:00+08:00</updated><id>http://localhost:4000/2017/09/01/markdown-odd-skills</id><content type="html" xml:base="http://localhost:4000/2017/09/01/markdown-odd-skills/">&lt;p&gt;  这几年也发现越来越多的网站和程序提供了对 Markdown 的支持，从GitHub、Jekyll到简书、掘金、CSDN 等，由此也从别人做得好的文档中，学到了一些『奇技淫巧』，所以本文不是对 Markdown 基础语法的介绍，而是一些相对高级、能将 Markdown 玩出更多花样的小技巧。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注：如下技巧大多是利用 Markdown 兼容部分 HTML 标签的特性来完成，不一定在所有网站和软件里都完全支持，主要以 GitHub 支持为准。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;在表格单元格里换行&quot;&gt;在表格单元格里换行&lt;/h2&gt;

&lt;p&gt;借助于 HTML 里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 实现。&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| Header1 | Header2                          |
|---------|----------------------------------|
| item 1  | 1. one&amp;lt;br /&amp;gt;2. two&amp;lt;br /&amp;gt;3. three |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例效果：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Header1&lt;/th&gt;
      &lt;th&gt;Header2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;item 1&lt;/td&gt;
      &lt;td&gt;1. one&lt;br /&gt;2. two&lt;br /&gt;3. three&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;图文混排&quot;&gt;图文混排&lt;/h2&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签来贴图，然后指定 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;align&lt;/code&gt; 属性。&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot;/&amp;gt;

这是一个示例图片。

图片显示在 N 段文字的右边。

N 与图片高度有关。

刷屏行。

刷屏行。

到这里应该不会受影响了，本行应该延伸到了图片的正下方，所以我要足够长才能确保不同的屏幕下都看到效果。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;示例效果：&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个示例图片。&lt;/p&gt;

&lt;p&gt;图片显示在 N 段文字的右边。&lt;/p&gt;

&lt;p&gt;N 与图片高度有关。&lt;/p&gt;

&lt;p&gt;刷屏行。&lt;/p&gt;

&lt;p&gt;刷屏行。&lt;/p&gt;

&lt;p&gt;到这里应该不会受影响了，本行应该延伸到了图片的正下方，所以我要足够长才能确保不同的屏幕下都看到效果。&lt;/p&gt;

&lt;h2 id=&quot;控制图片大小和位置&quot;&gt;控制图片大小和位置&lt;/h2&gt;

&lt;p&gt;标准的 Markdown 图片标记 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![]()&lt;/code&gt; 无法指定图片的大小和位置，只能依赖默认的图片大小，默认居左。&lt;/p&gt;

&lt;p&gt;而有时候源图太大想要缩小一点，或者想将图片居中，就仍需要借助 HTML 的标签来实现了。图片居中可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 标签加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;align&lt;/code&gt; 属性来控制，图片宽高则用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt; 来控制。&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**图片默认显示效果：**

![](https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png)

**加以控制后的效果：**

&amp;lt;div align=&quot;center&quot;&amp;gt;&amp;lt;img width=&quot;65&quot; height=&quot;75&quot; src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot;/&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例效果：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图片默认显示效果：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;加以控制后的效果：&lt;/strong&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img width=&quot;65&quot; height=&quot;75&quot; src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/demo.png&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;格式化表格&quot;&gt;格式化表格&lt;/h2&gt;

&lt;p&gt;表格在渲染之后很整洁好看，但是在文件源码里却可能是这样的：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|Header1|Header2|
|---|---|
|a|a|
|ab|ab|
|abc|abc|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不知道你能不能忍，反正我是不能忍。&lt;/p&gt;

&lt;p&gt;好在广大网友们的智慧是无穷的，在各种编辑器里为 Markdown 提供了表格格式化功能，比如我使用 Vim 编辑器，就有 &lt;a href=&quot;https://github.com/dhruvasagar/vim-table-mode&quot;&gt;vim-table-mode&lt;/a&gt; 插件，它能帮我自动将表格格式化成这样：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| Header1 | Header2 |
|---------|---------|
| a       | a       |
| ab      | ab      |
| abc     | abc     |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;是不是看着舒服多了？&lt;/p&gt;

&lt;p&gt;如果你不使用 Vim，也没有关系，比如 Atom 编辑器的 &lt;a href=&quot;https://atom.io/packages/markdown-table-formatter&quot;&gt;markdown-table-formatter&lt;/a&gt; 插件，Sublime Text 3 的 &lt;a href=&quot;https://github.com/bitwiser73/MarkdownTableFormatter&quot;&gt;MarkdownTableFormatter&lt;/a&gt; 等等，都提供了类似的解决方案。&lt;/p&gt;

&lt;h2 id=&quot;使用-emoji&quot;&gt;使用 Emoji&lt;/h2&gt;

&lt;p&gt;这个是 GitHub 对标准 Markdown 标记之外的扩展了，用得好能让文字生动一些。&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;我和我的小伙伴们都笑了。:smile:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例效果：&lt;/p&gt;

&lt;p&gt;我和我的小伙伴们都笑了。:smile:&lt;/p&gt;

&lt;p&gt;更多可用 Emoji 代码参见 &lt;a href=&quot;https://www.webpagefx.com/tools/emoji-cheat-sheet/&quot;&gt;https://www.webpagefx.com/tools/emoji-cheat-sheet/&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;行首缩进&quot;&gt;行首缩进&lt;/h2&gt;

&lt;p&gt;直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;ensp;&lt;/code&gt; 代表半角空格，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;emsp;&lt;/code&gt; 代表全角空格。&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;emsp;&amp;amp;emsp;春天来了，又到了万物复苏的季节。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例效果：&lt;/p&gt;

&lt;p&gt;  春天来了，又到了万物复苏的季节。&lt;/p&gt;

&lt;h2 id=&quot;展示数学公式&quot;&gt;展示数学公式&lt;/h2&gt;

&lt;p&gt;如果是在 GitHub Pages，可以参考 &lt;a href=&quot;http://wanguolin.github.io/mathmatics_rending/&quot;&gt;http://wanguolin.github.io/mathmatics_rending/&lt;/a&gt; 使用 MathJax 来优雅地展示数学公式（非图片）。&lt;/p&gt;

&lt;p&gt;如果是在 GitHub 项目的 README 等地方，目前我能找到的方案只能是贴图了，以下是一种比较方便的贴图方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;a href=&quot;https://www.codecogs.com/latex/eqneditor.php&quot;&gt;https://www.codecogs.com/latex/eqneditor.php&lt;/a&gt; 网页上部的输入框里输入 LaTeX 公式，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$&lt;/code&gt;；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24&lt;/code&gt;；&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/latex-img.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在文档需要的地方使用以上 URL 贴图，比如&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;示例效果：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;任务列表&quot;&gt;任务列表&lt;/h2&gt;

&lt;p&gt;在 GitHub 和 GitLab 等网站，除了可以使用有序列表和无序列表外，还可以使用任务列表，很适合要列出一些清单的场景。&lt;/p&gt;

&lt;p&gt;示例代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**购物清单**

- [ ] 一次性水杯
- [x] 西瓜
- [ ] 豆浆
- [x] 可口可乐
- [ ] 小茗同学
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;示例效果：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;购物清单&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;一次性水杯&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;西瓜&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;豆浆&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;可口可乐&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;小茗同学&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;自动维护目录&quot;&gt;自动维护目录&lt;/h2&gt;

&lt;p&gt;有时候维护一份比较长的文档，希望能够自动根据文档中的标题生成目录（Table of Contents），并且当标题有变化时自动更新目录，能减轻工作量，也不易出错。&lt;/p&gt;

&lt;p&gt;如果你使用 Vim 编辑器，那可以使用插件 &lt;a href=&quot;https://github.com/mzlogin/vim-markdown-toc&quot;&gt;vim-markdown-toc&lt;/a&gt; 来帮你完美地解决此事：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mzlogin/vim-markdown-toc/master/screenshots/english.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你使用其它编辑器，一般也能找到对应的解决方案，比如 Atom 编辑器的 &lt;a href=&quot;https://atom.io/packages/markdown-toc&quot;&gt;markdown-toc&lt;/a&gt; 插件，Sublime Text 的 &lt;a href=&quot;https://packagecontrol.io/packages/MarkdownTOC&quot;&gt;MarkdownTOC&lt;/a&gt; 插件等。&lt;/p&gt;

&lt;h2 id=&quot;后话&quot;&gt;后话&lt;/h2&gt;

&lt;p&gt;好了，这一波的奇技淫巧就此告一段落，希望大家在了解这些之后能有所收获，更好地排版，专注写作。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md&quot;&gt;https://raw.githubusercontent.com/matiassingers/awesome-readme/master/readme.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com/songpfei/note/247346&quot;&gt;https://www.zybuluo.com/songpfei/note/247346&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Cheney King</name></author><summary type="html">  这几年也发现越来越多的网站和程序提供了对 Markdown 的支持，从GitHub、Jekyll到简书、掘金、CSDN 等，由此也从别人做得好的文档中，学到了一些『奇技淫巧』，所以本文不是对 Markdown 基础语法的介绍，而是一些相对高级、能将 Markdown 玩出更多花样的小技巧。</summary></entry></feed>